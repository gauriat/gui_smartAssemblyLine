Login.js
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import logo from 'C:/Users/Windows 11/Downloads/Code1/Code/frontend/src/images/logo2.png';
import background from './back.jpg';

function Login({ onLogin }) {
    const [values, setValues] = useState({
        username: '',
        password: ''
    });
    const [error, setError] = useState('');
    const navigate = useNavigate();

    // Reset form on component mount
    useEffect(() => {
        setValues({ username: '', password: '' });
        setError('');
    }, []);

    const handleInput = (event) => {
        setValues((prev) => ({ ...prev, [event.target.name]: event.target.value }));
    };

    const handleSubmit = async (event) => {
        event.preventDefault();
        setError(''); // Clear previous error

        try {
            const response = await axios.post('http://localhost:8081/login', {
                username: values.username,
                password: values.password
            });

            if (response.data.success) {
                const { userId, userType } = response.data;

                // Store user information in session storage
                sessionStorage.setItem('userId', userId);
                sessionStorage.setItem('role', userType);

                onLogin(userType); // Notify parent component of login

                // Navigate to the appropriate dashboard
                if (userType === 'customer') {
                    navigate('/dashboardCustomer');
                } else if (userType === 'operator') {
                    navigate('/dashboardOperator');
                } else {
                    setError('Unknown user type');
                }
            } else {
                setError(response.data.message || 'Invalid credentials');
            }
        } catch (error) {
            console.error('Error during login:', error);
            setError('Something went wrong. Please try again later.');
        }
    };

    return (
        <div className="login-container" style={{ backgroundImage: url(${background}) }}>
            <div className="login-box">
                <div className="logo-container">
                    <img src={logo} alt="Logo" className="logo" />
                </div>
                <div className="login-form-container">
                    <h2 style={{ color: '#FFF7D1' }}>Welcome Back!</h2>
                    <form onSubmit={handleSubmit}>
                        <div className="mb-3">
                            <label htmlFor="username" style={{ color: '#FFF7D1', fontStyle: 'italic' }}>
                                <strong>Enter Username:</strong>
                            </label>
                            <br />
                            <input
                                type="text"
                                placeholder="Enter Username"
                                name="username"
                                onChange={handleInput}
                                value={values.username}
                                className="form-control rounded-0"
                            />
                        </div>
                        <div className="mb-3">
                            <label htmlFor="password" style={{ color: '#FFF7D1', fontStyle: 'italic' }}>
                                <strong>Enter Password:</strong>
                            </label>
                            <br />
                            <input
                                type="password"
                                placeholder="Enter Password"
                                name="password"
                                onChange={handleInput}
                                value={values.password}
                                className="form-control rounded-0"
                            />
                        </div>
                        {error && <div className="text-danger mb-3">{error}</div>}
                        <button type="submit" className="btn btn-success w-100 rounded-0">
                            Log in
                        </button>
                    </form>
                </div>
            </div>
        </div>
    );
}

export default Login;

server.js
const express = require('express');
const mysql = require('mysql2/promise'); // Use mysql2 with promises
const multer = require('multer');
const path = require('path');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Database connection setup with pooling
const dbConfig = {
    host: 'localhost',
    user: 'root',
    password: 'Aish@123',
    database: 'smartassemblyline'
};

// Create a pool to manage multiple connections
const pool = mysql.createPool(dbConfig);

// File storage setup for multer
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/');
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});

const upload = multer({ storage: storage });

// Login endpoint
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    try {
        const [rows] = await pool.query(
            'SELECT Customer_ID AS id, Customer_type FROM Customers WHERE Customer_Name = ? AND Customer_Password = ?',
            [username, password]
        );

        if (rows.length > 0) {
            const { id, Customer_type: userType } = rows[0];
            return res.status(200).json({ success: true, userId: id, userType });
        } else {
            return res.status(401).json({ success: false, message: 'Invalid username or password' });
        }
    } catch (error) {
        console.error('Database error during login:', error);
        return res.status(500).json({ success: false, message: 'Internal server error' });
    }
});

app.post('/logout', (req, res) => {
    res.clearCookie('authToken'); // Clears cookie if used
    return res.status(200).json({ success: true, message: 'Logged out successfully' });
});

// Login route
/*app.post('/loginOperator', async (req, res) => {
    const { username, password } = req.body;

    try {
        const [rows] = await req.db.query('SELECT * FROM operator WHERE Op_login = ?', [username]);
        if (rows.length > 0) {
            const operator = rows[0];
            console.log(operator.username,operator.password);
            if (password === operator.Op_password) {
                const operatorId=operator.Operator_ID;
                console.log('Operator ID:', operatorId);
                return res.json({ success: true, operatorId}); // Return user ID on success
            } else {
                return res.json({ success: false, message: 'Invalid credentials' });
            }
        } else {
            res.json({ success: false, message: 'Operator not found' });
        }
    } catch (error) {
        console.error('Error fetching user:', error);
        res.status(500).json({ success: false, message: 'Server error' });
    }
});*/

// Add pattern route
app.post('/addPattern', upload.single('image'), async (req, res) => {
    const userId = req.body.userId;
    const image = req.file;

    // Define folder path based on Customer_ID
    const customerFolderPath = path.join(__dirname, 'uploads', customer_${userId});

    if (!fs.existsSync(customerFolderPath)) {
        fs.mkdirSync(customerFolderPath, { recursive: true });
    }

    // Define the full path for storing the image
    const imagePath = path.join(customerFolderPath, image.originalname);

    try {
        fs.renameSync(image.path, imagePath);

        const query = 'INSERT INTO Pattern (Customer_ID, image_path, UpdatedDate) VALUES (?, ?, CURDATE())';
        await req.db.query(query, [userId, imagePath]);

        res.status(200).json({ success: true });
    } catch (error) {
        console.error('Error inserting pattern:', error);
        res.status(500).json({ success: false });
    }
});

// View patterns route
app.get('/viewPatterns', async (req, res) => {
    const customerId = req.query.userId; // Updated to match Customer_ID

    if (!customerId) {
        return res.status(400).json({ success: false, message: 'Customer ID is required' });
    }

    try {
        const query = 'SELECT * FROM Pattern WHERE Customer_ID = ?';
        const [patterns] = await req.db.query(query, [customerId]);

        // Log results for debugging
        console.log('Patterns fetched:', patterns);

        res.json({ success: true, patterns });
    } catch (error) {
        console.error('Error fetching patterns:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }
});

// View patterns route
app.get('/patterns', async (req, res) => {
    try {
        const query = 'SELECT * FROM Pattern';
        const [patterns] = await req.db.query(query);

        if (patterns.length === 0) {
            return res.status(404).json({ success: false, message: 'No patterns found' });
        }

        res.json({ success: true, patterns });
    } catch (error) {
        console.error('Error fetching patterns:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }
});

// Place Order API
app.post('/placeOrder', async (req, res) => {
    const { userId, cartItems } = req.body;  // cartItems: [{ idPattern, quantity }]

    if (!userId || !cartItems || cartItems.length === 0) {
        return res.status(400).json({ success: false, message: 'User ID and cart items are required' });
    }

    let connection;
    try {
        connection = await pool.getConnection();
        await connection.beginTransaction();

        // Step 1: Insert into Order table
        const [orderResult] = await connection.query(
            'INSERT INTO Order (Customer_ID, orderDate) VALUES (?, NOW())', 
            [userId]
        );
        const orderId = orderResult.insertId;

        // Step 2: Insert each cart item into OrderItem table
        for (const item of cartItems) {
            const { idPattern, quantity } = item;

            // Insert into OrderItem
            await connection.query(
                'INSERT INTO OrderItem (Order_ID, Pattern_ID, Quantity) VALUES (?, ?, ?)',
                [orderId, idPattern, quantity]
            );
        }

        // Commit transaction
        await connection.commit();

        res.status(200).json({ success: true, message: 'Order placed successfully' });
    } catch (error) {
        if (connection) await connection.rollback();  // Rollback on error
        console.error('Error placing order:', error);
        res.status(500).json({ success: false, message: 'Error placing order' });
    } finally {
        if (connection) connection.release();
    }
});

//view orders
app.get('/viewOrders', async (req, res) => {
    const userId = req.query.userId;

    if (!userId) {
        return res.status(400).json({ success: false, message: 'User ID is required' });
    }

    try {
        const query = `
            SELECT 
                o.Order_ID,
                oi.OrderItem_ID,
                oi.Quantity,
                p.Pattern_ID,
                p.image_path,
                o.orderDate
            FROM 
                \Order\ o
            JOIN 
                OrderItem oi ON o.Order_ID = oi.Order_ID
            JOIN 
                Pattern p ON oi.Pattern_ID = p.Pattern_ID
            WHERE 
                o.Customer_ID = ?
        `;

        const [orders] = await pool.query(query, [userId]);

        if (orders.length === 0) {
            return res.status(404).json({ success: false, message: 'No orders found for this user.' });
        }

        res.status(200).json({ success: true, orders });
    } catch (error) {
        console.error('Error fetching orders:', error);
        res.status(500).json({ success: false, message: 'Server error' });
    }
});

// Total orders count
app.get('/totalOrdersCount', async (req, res) => {
    try {
        const [result] = await req.db.query(`SELECT COUNT(*) AS totalOrders FROM \Order\`);
        const totalOrders = result[0].totalOrders;

        res.status(200).json({ success: true, totalOrders });
    } catch (error) {
        console.error('Error fetching total orders count:', error);
        res.status(500).json({ success: false, message: 'Server error' });
    }
});

//All orders
app.get('/orders', async (req, res) => {
    try {
        const query = `
            SELECT 
                o.Order_ID, 
                o.orderDate, 
                oi.OrderItem_ID, 
                oi.Quantity, 
                p.Pattern_ID, 
                p.image_path, 
                c.Customer_ID, 
                c.Customer_Name, 
                c.Customer_Email
            FROM 
                \Order\ o
            JOIN 
                OrderItem oi ON o.Order_ID = oi.Order_ID
            JOIN 
                Pattern p ON oi.Pattern_ID = p.Pattern_ID
            JOIN 
                Customers c ON o.Customer_ID = c.Customer_ID;
        `;

        const [orders] = await req.db.query(query);

        if (orders.length === 0) {
            return res.status(404).json({ success: false, message: 'Order not found.' });
        }
    
        const order = orders[0];
    
        // Find an empty Raw Material (RM) rack
        const emptyRmRack = await findEmptyRack(req, rackPriorityRM, 1);
        if (!emptyRmRack) {
            return res.status(500).json({ success: false, message: 'No empty Raw Material racks available.' });
        }
    
        // Find an empty Finished Goods (FG) rack
        const emptyFgRack = await findEmptyRack(req, rackPriorityFG, 2);
        if (!emptyFgRack) {
            return res.status(500).json({ success: false, message: 'No empty Finished Goods racks available.' });
        }
    
        // Insert into Production table
        await req.db.query(
            'INSERT INTO Production (Order_ID, Operator_ID, RawMaterial_Rack_ID, FinishedGoods_Rack_ID, StartTime, Status) VALUES (?, ?, ?, ?, NOW(), "In Progress")', 
            [orderId, operatorId, emptyRmRack, emptyFgRack]
        );
    
        res.status(200).json({ success: true, message: 'Production started successfully.' });
    } catch (error) {
        console.error('Error starting production:', error);
        res.status(500).json({ success: false, message: 'Server error' });
    }
    
});

// Prioritized rack lists based on nearest to farthest logic
const rackPriorityRM = [
    'RM_01', 'RM_02', 'RM_03', 'RM_04', 'RM_05', 'RM_06',
    'RM_07', 'RM_08', 'RM_09', 'RM_10', 'RM_11', 'RM_12',
    'RM_13', 'RM_14', 'RM_15', 'RM_16', 'RM_17', 'RM_18',
    'RM_19', 'RM_20', 'RM_21', 'RM_22', 'RM_23', 'RM_24'
];

const rackPriorityFG = [
    'FG_01', 'FG_02', 'FG_03', 'FG_04', 'FG_05', 'FG_06',
    'FG_07', 'FG_08', 'FG_09', 'FG_10', 'FG_11', 'FG_12',
    'FG_13', 'FG_14', 'FG_15', 'FG_16', 'FG_17', 'FG_18',
    'FG_19', 'FG_20', 'FG_21', 'FG_22', 'FG_23', 'FG_24'
];

const findEmptyRack = async (req, rackPriority, rackType) => {
    try {
        for (let rack of rackPriority) {
            const [result] = await req.db.query(
                'SELECT status FROM Rack WHERE Rack_ID = ? AND ASRS_ID = ?', 
                [rack, rackType]
            );

            if (rackType === 1 && result[0]?.status === 'filled') {
                await req.db.query(
                    'UPDATE Rack SET status = "empty" WHERE Rack_ID = ? AND ASRS_ID = ?', 
                    [rack, rackType]
                );
                return rack;
            } else if (rackType === 2 && result[0]?.status === 'empty') {
                await req.db.query(
                    'UPDATE Rack SET status = "filled" WHERE Rack_ID = ? AND ASRS_ID = ?', 
                    [rack, rackType]
                );
                return rack;
            }
            console.log(rack);
        }
        return null;
    } catch (err) {
        console.error(Error finding rack for type ${rackType}:, err);
        return null;
    }
};

app.post('/startProduction', async (req, res) => {
    const { orderId, operatorId } = req.body;

    try {
        const [orders] = await req.db.query(
            'SELECT Customer_ID FROM Order WHERE Order_ID = ?',
            [orderId]
        );
        //console.log('Operator ID:',operatorId, 'Order ID:', orderId);
        if (orders.length === 0) {
            return res.status(404).json({ success: false, message: 'Order not found' });
        }
        const customerId = orders[0].Customer_ID;
        //console.log('CustomerID:',customerId);
        const [orderItems] = await req.db.query(
            'SELECT OrderItem_ID FROM OrderItem WHERE Order_ID = ?',
            [orderId]
        );
        if (orderItems.length === 0) {
            return res.status(404).json({ success: false, message: 'Order item not found' });
        }
        const item = orderItems[0];
        //console.log('OrderItem ID:',item.OrderItem_ID);
        const rackRM = await findEmptyRack(req, rackPriorityRM, 1);
        const rackFG = await findEmptyRack(req, rackPriorityFG, 2);

        console.log('rm:', rackRM, "fg:", rackFG);
        if (!rackRM || !rackFG) {
            return res.status(500).json({ success: false, message: 'No available racks' });
        }

        const [proc]= await req.db.query(
            'SELECT Process_ID FROM Process'
        );
        const procId=proc[0];
        console.log(procId);
        await req.db.query(
            'INSERT INTO Production (OrderItem_ID, Order_ID, Customer_ID, Operator_ID, Process_ID, StartedDate, LastWorked, Rack_RM, Rack_FG) VALUES (?, ?, ?, ?, ?, NOW(), NOW(), ?, ?)',
            [item.OrderItem_ID, orderId, customerId, operatorId, procId.Process_ID, rackRM, rackFG]
        );        

        res.status(200).json({ success: true, message: 'Production started successfully' });
    } catch (error) {
        console.error('Error starting production:', error);
        res.status(500).json({ success: false, message: 'Failed to start production' });
    }
});

//Fetches Rack Status
app.get('/getRackStatus', async (req, res) => {
    try {
        const [racks] = await req.db.query('SELECT Rack_ID, rowNumber, colNumber, status FROM Rack');
        res.status(200).json({ success: true, data: racks });
    } catch (error) {
        console.error('Error fetching rack status:', error);
        res.status(500).json({ success: false, message: 'Failed to fetch rack status' });
    }
});

//Update Rack Status
app.post('/updateRackStatus', async (req, res) => {
    const { rackID, status } = req.body;

    try {
        const [result] = await req.db.query(
            'UPDATE Rack SET status = ? WHERE Rack_ID = ?',
            [status, rackID]
        );

        if (result.affectedRows > 0) {
            res.json({ success: true, message: 'Rack status updated successfully' });
        } else {
            res.status(404).json({ success: false, message: 'Rack not found' });
        }
    } catch (error) {
        console.error('Error updating rack status:', error);
        res.status(500).json({ success: false, message: 'Failed to update rack status' });
    }
});

// API endpoint to get order history
app.get('/productionDetails', async (req, res) => {
    const machineId = req.query.machineId;
    console.log(machineId);
    if(!machineId)
        console.log('Na');
    
    const query = `
        SELECT 
            p.Production_ID,
            p.OrderItem_ID,
            p.Order_ID,
            p.Customer_ID,
            p.Operator_ID,
            p.Process_ID,
            p.StartedDate,
            p.LastWorked,
            p.Rack_RM,
            p.Rack_FG,
            pr.ProcessName,
            op.OperationName,
            m.Machine_ID,
            m.Machine_Name,
            m.Status AS Machine_Status,
            m.StartTime AS Machine_StartTime,
            m.EndTime AS Machine_EndTime
        FROM 
            Production p
        INNER JOIN Process pr ON p.Process_ID = pr.Process_ID
        INNER JOIN Operation op ON pr.Process_ID = op.Process_ID
        INNER JOIN Machine m ON op.Machine_ID = m.Machine_ID
        WHERE 
            m.Machine_ID = ?;
    `;

    try {
        console.log('Query to execute:', query.replace('?', machineId));
        const [results] = await req.db.query(query, [machineId]); // Use promise-style query
        console.log('Query Results:', results); // Debugging log
        res.status(200).send({ success: true, data: results });
    } catch (err) {
        console.error('Error fetching production details:', err);
        res.status(500).send({ success: false, message: 'Error fetching production details' });
    }
});

app.post('/updateMachineStatus', async (req, res) => {
    const { machineId, status, startTime, endTime } = req.body;

    try {
        if (status === 'Running') {
            await req.db.query(
                'UPDATE Machine SET Status = ?, StartTime = ? WHERE Machine_ID = ?',
                [status, startTime, machineId]
            );
        } else if (status === 'Idle') {
            await req.db.query(
                'UPDATE Machine SET Status = ?, EndTime = ? WHERE Machine_ID = ?',
                [status, endTime, machineId]
            );
        }
        res.send({ success: true });
    } catch (error) {
        console.error('Error updating machine status:', error);
        res.status(500).send({ success: false, message: 'Failed to update machine status.' });
    }
});


// Start the server
app.listen(8081, () => {
    console.log('Server is running on http://localhost:8081');
});

Database
INSERT INTO Customers (Customer_ID, Customer_Name, Customer_Password, Customer_type) 
VALUES (1, 'aishu', '1403', 'customer');

INSERT INTO Customers (Customer_ID, Customer_Name, Customer_Password, Customer_type) 
VALUES (2, 'operator1', '123', 'operator');

-- Creating Customers Table
CREATE TABLE Customers (
    Customer_ID INT PRIMARY KEY,
    Customer_Name VARCHAR(100),
    Customer_Email VARCHAR(100),
    Customer_Password VARCHAR(100),
    LastLoggedIn DATETIME,
    Customer_type ENUM('customer', 'operator') NOT NULL DEFAULT 'customer' -- Correct placement
);